<div class="container ">
    <div class="row " style="margin-top: 2%;">
        <div class="mb-3">
            <label for="Titulo"><Icon class="icon" Elements="@Icons.Titulo" /> | Título</label>
            <input type="text" class="form-control" name="Titulo" @bind-value="Titulo" />
        </div>
    </div>
    <div class="row">
        <div class="mb-3">
            <label for="formFile" class="form-label"><Icon class="icon" Elements="@Icons.Image" /> | Capa </label>
            @if (ImageDataUrl?.Length > 0)
            {
                <img class="capa" src="@ImageDataUrl" />
            }
            <label class="btn btn-primary">
                Escolher
                <InputFile class="form-control" hidden OnChange="@ImageHandleSelected" />
            </label>
            @if (ErroCapa)
            {
                <span class="erroTag">Não é possível adicionar esse arquivo! Por favor selecione algum arquivo JPEG ou PNG!</span>
            }
        </div>
    </div>
    <div class="row" style="justify-content: space-between;">
        <div class="mb-3 col-md-6">
            <label for="formFile" class="form-label"><Icon class="icon" Elements="@Icons.Video" /> | Video</label>
            <InputFile OnChange="@HandleFileSelected" class="form-control" />
            @if (ErroVideo)
            {
                <span class="erroTag">Não é possível adicionar esse arquivo! Por favor selecione algum arquivo MP4,MOV ou AVI!</span>
            }

        </div>
        <div class="col-md-2">
            <Button BackgroundColor="TablerColor.Primary" Size="ButtonSize.Large" Type="ButtonType.Button" IsLoading="@isLoadingButton" OnClick="SendFileTest" Text="Enviar" />
        </div>
    </div>
</div>

@code {
    IBrowserFile file;
    IBrowserFile image;
    bool isLoadingButton;
    string ImageDataUrl;
    bool ErroCapa;
    bool ErroVideo;
    public string Titulo;


    async Task ImageHandleSelected(InputFileChangeEventArgs e)
    {
        var formats = new string[] { "image/jpeg", "image/jpg", "image/png" };
        if (!formats.Contains(e.File.ContentType))
        {
            ErroCapa = true;
            return;
        }
        ErroCapa = false;
        image = e.File;
        var newFormat = "image/jpeg";
        var resizedImageFile = await image.RequestImageFileAsync(newFormat, 300, 300);
        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);

        var imageDataUrl = $"data:{newFormat};base64,{Convert.ToBase64String(buffer)}";
        ImageDataUrl = imageDataUrl;
    }

    void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var formats = new string[] { "video/mp4", "video/mov", "video/avi" };
        if (!formats.Contains(e.File.ContentType))
        {
            ErroVideo = true;
            return;
        }
        ErroVideo = false;
        file = e.File.;
    }

    void SendFileTest()
    {
        isLoadingButton = true;
    }
}
